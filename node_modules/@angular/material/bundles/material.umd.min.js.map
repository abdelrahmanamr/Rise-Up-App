{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-rc.1-a6ffd18');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatCellDef,\n  MatHeaderCellDef,\n  MatColumnDef,\n  MatHeaderRowDef,\n  MatRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {BehaviorSubject, combineLatest, empty, Observable, Subscription} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange: Observable<Sort> = this._sort ? this._sort.sortChange : empty();\n    const pageChange: Observable<PageEvent> = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => this._slideRenderer.stopThumbDrag());\n      });\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Used for storing a value temporarily, if it is assigned\n   * before the button toggles are initialized.\n   */\n  private _tempValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    this._tempValue = undefined;\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._tempValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._tempValue)) {\n      return !!this._tempValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._tempValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    // If the toggles haven't been initialized yet, save the value for later.\n    if (!this._buttonToggles) {\n      this._tempValue = value;\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Output","MatTabGroup","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","_this","_super","call","this","tslib_1.__extends","prototype","focus","nativeElement","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","Directive","args","selector","inputs","host","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_elementRef","_changeDetectorRef","_viewportRuler","_dir","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","Object","defineProperty","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","emit","focusIndex","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","dir","_getLayoutDirection","scrollLeft","scrollWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepHeader","iconOverrides","selected","active","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","find","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","startWith","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","width","_inkBarPositioner","show","_setStyles","hide","positions","inkBar","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","MatSelect","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleHeight","withFlexibleWidth","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","iconSource","iconSet","iconName","iconElement","cloneNode","_setSvgAttributes","_toSvgElement","svg","_svgElementFromString","MatIconRegistry","str","div","innerHTML","ELEMENT_NODE","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","_validatorOnChange","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","svgText","_createSvgElementForSingleIcon","responseText","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","preserveWhitespaces","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_tempValue","_syncButtonToggle","_isSelected","_isPrechecked","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","autocomplete","prevActiveItem","_scrollToOption","MatAutocompleteTrigger","_handleInput","_canOpen","_previousValue","openPanel","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","_outsideClickStream","clickTarget","formField","activeOption","TAB","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}